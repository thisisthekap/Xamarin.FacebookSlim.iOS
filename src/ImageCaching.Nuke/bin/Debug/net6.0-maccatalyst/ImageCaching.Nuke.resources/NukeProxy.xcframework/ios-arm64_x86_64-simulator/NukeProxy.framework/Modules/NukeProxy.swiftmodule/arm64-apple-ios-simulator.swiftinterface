// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios13.6-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NukeProxy
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Nuke
@_exported import NukeProxy
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@_inheritsConvenienceInitializers @objc(ImagePipeline) public class ImagePipeline : ObjectiveC.NSObject {
  @objc public static let shared: NukeProxy.ImagePipeline
  @objc public func loadImage(url: Foundation.URL, onCompleted: @escaping (UIKit.UIImage?, Swift.String) -> Swift.Void)
  @objc public func loadImage(url: Foundation.URL, placeholder: UIKit.UIImage?, errorImage: UIKit.UIImage?, into: UIKit.UIImageView)
  @objc public func loadImage(url: Foundation.URL, imageIdKey: Swift.String, placeholder: UIKit.UIImage?, errorImage: UIKit.UIImage?, into: UIKit.UIImageView)
  @objc public func loadData(url: Foundation.URL, onCompleted: @escaping (Foundation.Data?, Foundation.URLResponse?) -> Swift.Void)
  @objc public func loadData(url: Foundation.URL, imageIdKey: Swift.String?, reloadIgnoringCachedData: Swift.Bool, onCompleted: @escaping (Foundation.Data?, Foundation.URLResponse?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ImageCache) final public class ImageCache : ObjectiveC.NSObject {
  @objc public static let shared: NukeProxy.ImageCache
  @objc final public func removeAll()
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(DataLoader) final public class DataLoader : ObjectiveC.NSObject {
  @objc public static let shared: NukeProxy.DataLoader
  @objc final public func removeAllCachedResponses()
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(Prefetcher) final public class Prefetcher : ObjectiveC.NSObject {
  @objc final public func startPrefetching(with: [Foundation.URL])
  @objc final public func stopPrefetching(with: [Foundation.URL])
  @objc final public func stopPrefetching()
  @objc final public func pause()
  @objc final public func unPause()
  @objc override dynamic public init()
  @objc deinit
}
